services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fantasy}
      POSTGRES_USER: ${POSTGRES_USER:-fantasy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fantasy} -d ${POSTGRES_DB:-fantasy}"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST:-db}
      POSTGRES_DB: ${POSTGRES_DB:-fantasy}
      POSTGRES_USER: ${POSTGRES_USER:-fantasy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      APP_PASSWORD: ${APP_PASSWORD}
      AUTH_SECRET: ${AUTH_SECRET}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./:/app

  api-dev:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    command: ["uvicorn", "backend.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST:-db}
      POSTGRES_DB: ${POSTGRES_DB:-fantasy}
      POSTGRES_USER: ${POSTGRES_USER:-fantasy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
    profiles: ["dev"]
    networks:
      default:
        aliases:
          - api

  web:
    build:
      context: ./frontend
      dockerfile: ../docker/web.Dockerfile
    depends_on:
      - api
    ports:
      - "5173:5173"
    working_dir: /web

volumes:
  db_data:
